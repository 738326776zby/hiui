import React, { Component } from 'react'
import PropTypes from 'prop-types'
import ReactDOM from 'react-dom'
// import classNames from 'classnames'
import './style'
class Loading extends Component {
  // static propTypes = {
  //   color: PropTypes.string,
  //   delay: PropTypes.number,
  //   defaultVisible: PropTypes.bool,
  //   placement: PropTypes.string,
  //   title: PropTypes.string
  // }
  //
  // static defaultProps = {
  //   color: '#4a4a4a',
  //   delay: 1000,
  //   placement: 'top',
  //   defaultVisible: false,
  //   prefixCls: 'hi-loading'
  // };
  //
  // state = {
  //   tooltipShow: this.props.defaultVisible
  // }

  render () {
    let {tip} = this.props

    return (
      <div className='hi-loading'>
        <div className='hi-loading-mask'>
          <div className='hi-loading-outter'>
            <div className='sk-circle'>
              <div className='sk-circle1 sk-child' />
              <div className='sk-circle2 sk-child' />
              <div className='sk-circle3 sk-child' />
              <div className='sk-circle4 sk-child' />
              <div className='sk-circle5 sk-child' />
              <div className='sk-circle6 sk-child' />
              <div className='sk-circle7 sk-child' />
              <div className='sk-circle8 sk-child' />
              <div className='sk-circle9 sk-child' />
              <div className='sk-circle10 sk-child' />
              <div className='sk-circle11 sk-child' />
              <div className='sk-circle12 sk-child' />
            </div>
            <div className='hi-loading-text'>{tip}</div>
          </div>
        </div>
      </div>
    )
  }
}
Loading.propTypes = {
  tip: PropTypes.string
}
Loading.newInstance = function newNotificationInstance (properties) {
  let props = properties || {}
  let div = document.createElement('div')
  document.body.appendChild(div)
  ReactDOM.render(React.createElement(Loading, props), div)
  return {
    destroy () {
      ReactDOM.unmountComponentAtNode(div)
      document.body.removeChild(div)
    }
  }
}

let loadingInstance = 0
let getLoadingInstance = (tip) => {
  loadingInstance = loadingInstance || Loading.newInstance({
    tip
  })
  return loadingInstance
}
export default {
  open (tip = '加载中...') {
    getLoadingInstance(tip)
  },
  close () {
    if (loadingInstance) {
      loadingInstance.destroy()
      loadingInstance = null
    }
  }
}
