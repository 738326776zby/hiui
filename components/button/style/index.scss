@import '@hi-ui/core-css';

// Render line style button
@mixin render-line-button($color) {
  background-color: rgba($color, 0.1);
  border-color: rgba($color, 0.4);
  color: $color;

  &:not(.hi-btn--disabled):hover {
    border-color: rgba($color, 0.8);
    color: $color;
  }

  &:not(.hi-btn--disabled):active {
    background-color: rgba($color, 0.15);
    box-shadow: inset 0 4px 4px rgba($color, 0.25);
    color: $color;
  }

  // Status: disabled
  &.hi-btn--disabled,
  &[disabled],
  fieldset[disabled] {
    border-color: rgba($color, 0.2);
    color: rgba($color, 0.3);
  }
}

// Define component colors
@mixin hi-btn-style($color: get-color($palette-primary, 'hiui-blue')) {
  .hi-btn {
    // Types
    &--type_primary {
      background-color: map-get(get-palette($color), '50');
      color: $white;

      &:not(.hi-btn--disabled):hover {
        background-color: map-get(get-palette($color), '40');
        color: $white;
      }

      &:not(.hi-btn--disabled):active {
        background-color: map-get(get-palette($color), '60');
        color: $white;
        box-shadow: inset 0 4px 4px rgba(map-get(get-palette($color), '50'), 0.25);
      }

      // Status: disabled
      &.hi-btn--disabled,
      &[disabled],
      fieldset[disabled] {
        background-color: rgba(map-get(get-palette($color), '50'), 0.2);
        color: $white;
      }

      // Make a button look and behave like a link
      &.hi-btn--appearance_link {
        background-color: transparent;
        color: map-get(get-palette($color), '50');

        &:not(.hi-btn--disabled):hover {
          background-color: map-get(get-palette($color), '50');
          color: $white;
        }

        &:not(.hi-btn--disabled):active {
          background-color: map-get(get-palette($color), '60');
          color: $white;
        }

        // Status: disabled
        &.hi-btn--disabled,
        &[disabled],
        fieldset[disabled] {
          opacity: .54;
        }
      }
    }

    &--type_default {
      background-color: $white;
      border-color: $gray-dark;
      color: $black;

      &:not(.hi-btn--disabled):hover {
        border-color: darken($gray-dark, 15%);
        color: $black;
      }

      &:not(.hi-btn--disabled):active {
        background-color: $gray-light;
        box-shadow: inset 0 4px 4px rgba($black, 0.25);
        color: $black;
      }

      // Status: disabled
      &.hi-btn--disabled,
      &[disabled],
      fieldset[disabled] {
        background-color: $gray-light;
        border-color: rgba($black, 0.1);
        color: $gray-dark;
      }

      // Make a button look and behave like a link
      &.hi-btn--appearance_link {
        background-color: transparent;
        border-color: transparent;

        &:not(.hi-btn--disabled):hover {
          background-color: darken($gray-dark, 15%);
          color: $white;
        }

        &:not(.hi-btn--disabled):active {
          background-color: darken($gray-dark, 20%);
          border-color: darken($gray-dark, 20%);
          color: $white;
        }

        // Status: disabled
        &.hi-btn--disabled,
        &[disabled],
        fieldset[disabled] {
          opacity: .54;
        }
      }
    }

    &--type_line {
      @include render-line-button(map-get(get-palette($color), '50'));
    }

    @each $key in 'success', 'danger', 'warning' {
      &--type_#{$key} {
        $status-color: map-get(get-palette(get-color($palette-secondary, $key)), '50');
        @include render-line-button($status-color);

        // Make a button look and behave like a link
        &.hi-btn--appearance_link {
          background-color: transparent;
          border-color: transparent;

          &:not(.hi-btn--disabled):hover {
            background-color: rgba($status-color, 0.8);
            color: $white;
          }

          &:not(.hi-btn--disabled):active {
            background-color: $status-color;
            color: $white;
          }

          // Status: disabled
          &.hi-btn--disabled,
          &[disabled],
          fieldset[disabled] {
            opacity: .54;
          }
        }
      }
    }

    // Sizes
    &--size_large {
      height: $font-size-x-large * 1 + 18px * 2;
      padding: 17px 60px;
      font-size: $font-size-x-large;
    }

    &--size_small {
      height: $font-size-small * 1 + 6px * 2;
      padding: 5px 11px;
      font-size: $font-size-small;
    }
  }
}

.hi-btn {
  position: relative;
  display: inline-block;
  box-sizing: border-box;
  margin: 0; // For input.btn
  height: $font-size-normal * 1 + 8px * 2 + 1px * 2;
  padding: 8px 15px;
  border: 1px solid transparent;
  border-radius: 2px;
  font-size: $font-size-normal;
  font-weight: $font-weight-normal;
  line-height: 1;
  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  white-space: nowrap;
  touch-action: manipulation;
  cursor: pointer;
  transition: background-color $speed-normal $easing,
              border-color $speed-normal $easing,
              box-shadow $speed-fast $easing,
              color $speed-normal $easing;
  & + & {
    margin-left: $spacer-2;
  }

  &:focus {
    outline: 0;
  }

  &--disabled,
  &[disabled] {
    cursor: not-allowed;
  }

  &--block {
    display: block;
    width: 100%;
    & + & {
      margin-top: 4px;
    }
  }
}

a.hi-btn--disabled,
fieldset[disabled] .hi-btn {
  pointer-events: none; // Future-proof disabling of clicks on `<a>` elements
}

// Component colors
@include hi-btn-style();

@each $name, $color in $theme-colors {
  .theme__#{$name} {
    @include hi-btn-style($color);
  }
}

// Button Group
.hi-btn-group {
  position: relative;
  display: inline-block;
  > .hi-btn {
    position: relative;
    z-index: 0;
    margin-left: 0;
    margin-right: 0;
    &:hover {
      z-index: 1;
    }
    &:not(:first-child) {
      margin-left: -1px;
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
    &:not(:last-child) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }
}
